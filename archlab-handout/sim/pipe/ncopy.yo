                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Amano Sei
                            | #
                            | # 看了dalao的做法，真的超妙的说...
                            | # 所以这里要尝试在理解了dalao的做法后，自己重新写一遍
                            | # 这是将561版本修改jg优先级比je高的版本
                            | # 因为想让jg直接落入L里面，让我忘记了je的几率是最低的
                            | # 但是事实上，这样只省了一个时钟，而预测失误要2个时钟...
                            | # 10位版本这个问题被放大了我才意识到（
                            | #
                            | # 然后我才意识到，跳转的话就一定可以让RR通过落入进入L了
                            | #
                            | # 感叹，这个很多地方直觉感觉不到是正常的，因为很多地方是反直觉的
                            | # 比如更多的跳转语句在预测错误的几率更低的情况下，平均会有更好的表现
                            | # 现在分数已经达到了58.4了
                            | #
                            | # 可以看到因为平均值的算法不是计算总周期数，而是计算平均周期的平均数
                            | # 所以如果在前面加上jl而不是jge，会使得0~8的结果每个都减少了2个周期
                            | # 虽然对于大的数据量来说会增加周期数，但是平均起来就没有低的影响大
                            | # 现在分数是58.8
                            | # 可能是这个做法的瓶颈了（
                            | #
                            | # 重新调整了分界和顺序，分数上升到了59.0...说不定还可以在高一点
                            | #
                            | # 意识到最后一种情况没有必要直接跳转走，这样可以节省一个周期
                            | #
                            | # 因为就差一点点了，所以重新思考了cmov的可能性，再次否决
                            | # 因为cmov需要3个周期，jle的话平均需要2.5个周期
                            | # 但是会有最终部分出现一个bubble和还是要看最终部分的负数的个数...
                            | # 等下会尝试下cmov版本
                            | #
                            | # 一言以蔽之，新优化方法应该是拿高余数的一个周期增加换低余数的一个周期减少
                            | # 结果很显著，冲到了59.8，就差一点了！
                            | #
                            | # 现在的我，还能想到的只剩cmov和动刀hcl了
                            | # 但是现在除了剩8个以外的所有use/load hazard都被避免掉了...
                            | # 额外的ret的气泡唯一可能出现的地方是一个jle，这个是没有办法的事情
                            | # 再试一下dalao的树版本，还不行就写cmov
                            | #
                            | # dalao树失败，cmov失败，尝试hcl
                            | #
                            | # hcl成功，而且好巧不巧就是7.48，或许标准答案就是修改hcl的做法吧（
                            | # 但是我还可以进一步优化...
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x000: 6300                 | 	xorq %rax,%rax		# count = 0;
0x002: c0f2f7ffffffffffffff |     iaddq $-9, %rdx
0x00c: 72ad01000000000000   |     jl LastTest
0x015:                      | Loop:
0x015: 50870000000000000000 |     mrmovq (%rdi), %r8
0x01f: 50970800000000000000 |     mrmovq 8(%rdi), %r9
0x029: 40860000000000000000 |     rmmovq %r8, (%rsi)
0x033: 40960800000000000000 |     rmmovq %r9, 8(%rsi)
0x03d: 6288                 |     andq %r8, %r8
0x03f: 715200000000000000   |     jle Nposl1
0x048: c0f00100000000000000 |     iaddq $1, %rax
0x052:                      | Nposl1:
0x052: 6299                 |     andq %r9, %r9
0x054: 716700000000000000   |     jle Nposl2
0x05d: c0f00100000000000000 |     iaddq $1, %rax
0x067:                      | Nposl2:
0x067: 50871000000000000000 |     mrmovq 16(%rdi), %r8
0x071: 50971800000000000000 |     mrmovq 24(%rdi), %r9
0x07b: 40861000000000000000 |     rmmovq %r8, 16(%rsi)
0x085: 40961800000000000000 |     rmmovq %r9, 24(%rsi)
0x08f: 6288                 |     andq %r8, %r8
0x091: 71a400000000000000   |     jle Nposl3
0x09a: c0f00100000000000000 |     iaddq $1, %rax
0x0a4:                      | Nposl3:
0x0a4: 6299                 |     andq %r9, %r9
0x0a6: 71b900000000000000   |     jle Nposl4
0x0af: c0f00100000000000000 |     iaddq $1, %rax
0x0b9:                      | Nposl4:
0x0b9: 50872000000000000000 |     mrmovq 32(%rdi), %r8
0x0c3: 50972800000000000000 |     mrmovq 40(%rdi), %r9
0x0cd: 40862000000000000000 |     rmmovq %r8, 32(%rsi)
0x0d7: 40962800000000000000 |     rmmovq %r9, 40(%rsi)
0x0e1: 6288                 |     andq %r8, %r8
0x0e3: 71f600000000000000   |     jle Nposl5
0x0ec: c0f00100000000000000 |     iaddq $1, %rax
0x0f6:                      | Nposl5:
0x0f6: 6299                 |     andq %r9, %r9
0x0f8: 710b01000000000000   |     jle Nposl6
0x101: c0f00100000000000000 |     iaddq $1, %rax
0x10b:                      | Nposl6:
0x10b: 50873000000000000000 |     mrmovq 48(%rdi), %r8
0x115: 50973800000000000000 |     mrmovq 56(%rdi), %r9
0x11f: 50a74000000000000000 |     mrmovq 64(%rdi), %r10
0x129: 40863000000000000000 |     rmmovq %r8, 48(%rsi)
0x133: 40963800000000000000 |     rmmovq %r9, 56(%rsi)
0x13d: 40a64000000000000000 |     rmmovq %r10, 64(%rsi)
0x147: 6288                 |     andq %r8, %r8
0x149: 715c01000000000000   |     jle Nposl7
0x152: c0f00100000000000000 |     iaddq $1, %rax
0x15c:                      | Nposl7:
0x15c: 6299                 |     andq %r9, %r9
0x15e: 717101000000000000   |     jle Nposl8
0x167: c0f00100000000000000 |     iaddq $1, %rax
0x171:                      | Nposl8:
0x171: 62aa                 |     andq %r10, %r10
0x173: 718601000000000000   |     jle Nposl9
0x17c: c0f00100000000000000 |     iaddq $1, %rax
0x186:                      | Nposl9:
0x186: c0f64800000000000000 |     iaddq $0x48, %rsi
0x190: c0f74800000000000000 |     iaddq $0x48, %rdi
0x19a: c0f2f7ffffffffffffff |     iaddq $-9, %rdx
0x1a4: 751500000000000000   |     jge Loop
0x1ad:                      | LastTest:
0x1ad: c0f20800000000000000 |     iaddq $8, %rdx
0x1b7: 76ca01000000000000   |     jg RR
0x1c0: 736203000000000000   |     je L1
0x1c9: 90                   |     ret
0x1ca:                      | RR:
0x1ca: c0f2feffffffffffffff |     iaddq $-2, %rdx
0x1d4: 76ef01000000000000   |     jg RR3
0x1dd: 723903000000000000   |     jl L2
0x1e6: 731003000000000000   |     je L3
0x1ef:                      | RR3:
0x1ef: c0f2fdffffffffffffff |     iaddq $-3, %rdx
0x1f9: 721402000000000000   |     jl RL
0x202: 763002000000000000   |     jg RR2
0x20b: 709502000000000000   |     jmp L6
0x214:                      | RL:
0x214: c0f20100000000000000 |     iaddq $1, %rdx
0x21e: 72e702000000000000   |     jl L4
0x227: 73be02000000000000   |     je L5
0x230:                      | RR2:
0x230: c0f2feffffffffffffff |     iaddq $-2, %rdx
0x23a: 726c02000000000000   |     jl L7
0x243:                      | L8:
0x243: 50873800000000000000 |     mrmovq 56(%rdi), %r8
0x24d: 40863800000000000000 |     rmmovq %r8, 56(%rsi)
0x257: 6288                 |     andq %r8, %r8
0x259: 716c02000000000000   |     jle L7
0x262: c0f00100000000000000 |     iaddq $1, %rax
0x26c:                      | L7:
0x26c: 50873000000000000000 |     mrmovq 48(%rdi), %r8
0x276: 40863000000000000000 |     rmmovq %r8, 48(%rsi)
0x280: 6288                 |     andq %r8, %r8
0x282: 719502000000000000   |     jle L6
0x28b: c0f00100000000000000 |     iaddq $1, %rax
0x295:                      | L6:
0x295: 50872800000000000000 |     mrmovq 40(%rdi), %r8
0x29f: 40862800000000000000 |     rmmovq %r8, 40(%rsi)
0x2a9: 6288                 |     andq %r8, %r8
0x2ab: 71be02000000000000   |     jle L5
0x2b4: c0f00100000000000000 |     iaddq $1, %rax
0x2be:                      | L5:
0x2be: 50872000000000000000 |     mrmovq 32(%rdi), %r8
0x2c8: 40862000000000000000 |     rmmovq %r8, 32(%rsi)
0x2d2: 6288                 |     andq %r8, %r8
0x2d4: 71e702000000000000   |     jle L4
0x2dd: c0f00100000000000000 |     iaddq $1, %rax
0x2e7:                      | L4:
0x2e7: 50871800000000000000 |     mrmovq 24(%rdi), %r8
0x2f1: 40861800000000000000 |     rmmovq %r8, 24(%rsi)
0x2fb: 6288                 |     andq %r8, %r8
0x2fd: 711003000000000000   |     jle L3
0x306: c0f00100000000000000 |     iaddq $1, %rax
0x310:                      | L3:
0x310: 50871000000000000000 |     mrmovq 16(%rdi), %r8
0x31a: 40861000000000000000 |     rmmovq %r8, 16(%rsi)
0x324: 6288                 |     andq %r8, %r8
0x326: 713903000000000000   |     jle L2
0x32f: c0f00100000000000000 |     iaddq $1, %rax
0x339:                      | L2:
0x339: 50870800000000000000 |     mrmovq 8(%rdi), %r8
0x343: 40860800000000000000 |     rmmovq %r8, 8(%rsi)
0x34d: 6288                 |     andq %r8, %r8
0x34f: 716203000000000000   |     jle L1
0x358: c0f00100000000000000 |     iaddq $1, %rax
0x362:                      | L1:
0x362: 50870000000000000000 |     mrmovq (%rdi), %r8
0x36c: 40860000000000000000 |     rmmovq %r8, (%rsi)
0x376: 6288                 |     andq %r8, %r8
0x378: 718b03000000000000   |     jle Done
0x381: c0f00100000000000000 |     iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x38b:                      | Done:
0x38b: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x38c:                      | End:
                            | #/* $end ncopy-ys */
