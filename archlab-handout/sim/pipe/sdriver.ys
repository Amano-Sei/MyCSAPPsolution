#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Amano Sei
#
# emmm，怎么说呢，这次的lab在做完homework的情况下完全没有难度啊（
# 不过还是简单说下吧
# 首先，我们的pipeline是默认判断跳转执行的，
# 所以把第一次判断和循环的进行合并
# （不过如果做好前向不跳，后向跳的判断的话肯定是本来比较好）
# 然后，这是我在用y86-64写程序的时候的感想
# 如果常数占据寄存器的话，寄存器的数量瞬间就感觉很紧张（
# 如果不固定占用的话，重复初始化很浪费时钟周期
# 所以iaddq很有必要，毕竟是两条变一条嘛
# （占据的话虽然从平均来说还是差不多，但是总体还是会多两条）
#
# emmm说个题外话，受第三章影响，我潜意识觉得用结束地址来计算是最高效的
# 然而这是建立在有leaq和cmp的基础之上的（
# 在y86-64中，能靠and自己判断是最好的，因为不需要花一条指令拷贝
# 在y86-64中，没有乘和leaq，只能用三次连加算地址...
#
# 起先说没有难度...一跑benchmark就傻眼了...
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len > 0?
    jg Loop
    ret
Loop:
	iaddq $8, %rdi		# src++
	iaddq $8, %rsi		# dst++
    mrmovq -8(%rdi), %r10	# read val from src...
	rmmovq %r10, -8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos:
	iaddq $-1, %rdx		# len--
Test:
	jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
