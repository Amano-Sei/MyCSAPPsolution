#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Amano Sei
#
# 看了dalao的做法，真的超妙的说...
# 所以这里要尝试在理解了dalao的做法后，自己重新写一遍
# 这是将557版本扩展到10位展开的版本，但是分数只有55.3
# 没有像预料的那样大幅提升...反而降了（
#
# 稍有迷茫...不过好像有了新的主意，现在尝试一下
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
    iaddq $-10, %rdx
    jge Loop
LastTest:
    iaddq $6, %rdx
    jl LL
    je L4
    iaddq $-2, %rdx
    jl L5
    je L6
    iaddq $-2, %rdx
    jl L7
    je L8
    jmp L9
LL:
    iaddq $3, %rdx
    jl Done
    je L1
    iaddq $-2, %rdx
    jl L2
    je L3
Loop:
    mrmovq (%rdi), %r8
    mrmovq 8(%rdi), %r9
    rmmovq %r8, (%rsi)
    rmmovq %r9, 8(%rsi)
    andq %r8, %r8
    jle Nposl1
    iaddq $1, %rax
Nposl1:
    andq %r9, %r9
    jle Nposl2
    iaddq $1, %rax
Nposl2:
    mrmovq 16(%rdi), %r8
    mrmovq 24(%rdi), %r9
    rmmovq %r8, 16(%rsi)
    rmmovq %r9, 24(%rsi)
    andq %r8, %r8
    jle Nposl3
    iaddq $1, %rax
Nposl3:
    andq %r9, %r9
    jle Nposl4
    iaddq $1, %rax
Nposl4:
    mrmovq 32(%rdi), %r8
    mrmovq 40(%rdi), %r9
    rmmovq %r8, 32(%rsi)
    rmmovq %r9, 40(%rsi)
    andq %r8, %r8
    jle Nposl5
    iaddq $1, %rax
Nposl5:
    andq %r9, %r9
    jle Nposl6
    iaddq $1, %rax
Nposl6:
    mrmovq 48(%rdi), %r8
    mrmovq 56(%rdi), %r9
    rmmovq %r8, 48(%rsi)
    rmmovq %r9, 56(%rsi)
    andq %r8, %r8
    jle Nposl7
    iaddq $1, %rax
Nposl7:
    andq %r9, %r9
    jle Nposl8
    iaddq $1, %rax
Nposl8:
    mrmovq 64(%rdi), %r8
    mrmovq 72(%rdi), %r9
    rmmovq %r8, 64(%rsi)
    rmmovq %r9, 72(%rsi)
    andq %r8, %r8
    jle Nposl9
    iaddq $1, %rax
Nposl9:
    andq %r9, %r9
    jle Nposl10
    iaddq $1, %rax
Nposl10:
    iaddq $0x50, %rsi
    iaddq $0x50, %rdi
    iaddq $-10, %rdx
    jge Loop
    jmp LastTest
L9:
    mrmovq 64(%rdi), %r8
    rmmovq %r8, 64(%rsi)
    andq %r8, %r8
L8:
    mrmovq 56(%rdi), %r8
    jle Nposf9
    iaddq $1, %rax
Nposf9:
    rmmovq %r8, 56(%rsi)
    andq %r8, %r8
L7:
    mrmovq 48(%rdi), %r8
    jle Nposf8
    iaddq $1, %rax
Nposf8:
    rmmovq %r8, 48(%rsi)
    andq %r8, %r8
L6:
    mrmovq 40(%rdi), %r8
    jle Nposf7
    iaddq $1, %rax
Nposf7:
    rmmovq %r8, 40(%rsi)
    andq %r8, %r8
L5:
    mrmovq 32(%rdi), %r8
    jle Nposf6
    iaddq $1, %rax
Nposf6:
    andq %r8, %r8
    rmmovq %r8, 32(%rsi)
L4:
    mrmovq 24(%rdi), %r8
    jle Nposf5
    iaddq $1, %rax
Nposf5:
    andq %r8, %r8
    rmmovq %r8, 24(%rsi)
L3:
    mrmovq 16(%rdi), %r8
    jle Nposf4
    iaddq $1, %rax
Nposf4:
    andq %r8, %r8
    rmmovq %r8, 16(%rsi)
L2:
    mrmovq 8(%rdi), %r8
    jle Nposf3
    iaddq $1, %rax
Nposf3:
    andq %r8, %r8
    rmmovq %r8, 8(%rsi)
L1:
    mrmovq (%rdi), %r8
    jle Nposf2
    iaddq $1, %rax
Nposf2:
    andq %r8, %r8
    rmmovq %r8, (%rsi)
    jle Done
    iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
