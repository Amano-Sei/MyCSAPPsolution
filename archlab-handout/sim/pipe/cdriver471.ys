#######################################################################
# Test for copying block of size 471;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $471, %rdx		# src and dst have 471 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Amano Sei
#
# emmm，怎么说呢，这次的lab在做完homework的情况下完全没有难度啊（
# 不过还是简单说下吧
# 首先，我们的pipeline是默认判断跳转执行的，
# 所以把第一次判断和循环的进行合并
# （不过如果做好前向不跳，后向跳的判断的话肯定是本来比较好）
# 然后，这是我在用y86-64写程序的时候的感想
# 如果常数占据寄存器的话，寄存器的数量瞬间就感觉很紧张（
# 如果不固定占用的话，重复初始化很浪费时钟周期
# 所以iaddq很有必要，毕竟是两条变一条嘛
# （占据的话虽然从平均来说还是差不多，但是总体还是会多两条）
#
# emmm说个题外话，受第三章影响，我潜意识觉得用结束地址来计算是最高效的
# 然而这是建立在有leaq和cmp的基础之上的（
# 在y86-64中，能靠and自己判断是最好的，因为不需要花一条指令拷贝
# 在y86-64中，没有乘和leaq，只能用三次连加算地址...
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len > 0?
    jmp Test
Loop:
    mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos:
	iaddq $8, %rdi		# src++
	iaddq $8, %rsi		# dst++
	iaddq $-1, %rdx		# len--
Test:
	jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 247.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $247,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $471,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad -3
	.quad 4
	.quad -5
	.quad -6
	.quad 7
	.quad 8
	.quad -9
	.quad 10
	.quad -11
	.quad -12
	.quad -13
	.quad -14
	.quad 15
	.quad 16
	.quad -17
	.quad -18
	.quad 19
	.quad -20
	.quad -21
	.quad -22
	.quad 23
	.quad 24
	.quad 25
	.quad 26
	.quad 27
	.quad 28
	.quad 29
	.quad -30
	.quad 31
	.quad 32
	.quad 33
	.quad -34
	.quad 35
	.quad 36
	.quad -37
	.quad 38
	.quad 39
	.quad -40
	.quad 41
	.quad -42
	.quad -43
	.quad 44
	.quad -45
	.quad 46
	.quad -47
	.quad -48
	.quad 49
	.quad 50
	.quad -51
	.quad 52
	.quad 53
	.quad 54
	.quad 55
	.quad 56
	.quad 57
	.quad -58
	.quad 59
	.quad 60
	.quad 61
	.quad 62
	.quad 63
	.quad -64
	.quad -65
	.quad -66
	.quad -67
	.quad 68
	.quad -69
	.quad 70
	.quad 71
	.quad 72
	.quad -73
	.quad 74
	.quad 75
	.quad -76
	.quad 77
	.quad 78
	.quad -79
	.quad 80
	.quad 81
	.quad -82
	.quad -83
	.quad -84
	.quad 85
	.quad -86
	.quad 87
	.quad 88
	.quad -89
	.quad -90
	.quad -91
	.quad -92
	.quad 93
	.quad -94
	.quad -95
	.quad 96
	.quad -97
	.quad -98
	.quad -99
	.quad -100
	.quad 101
	.quad 102
	.quad 103
	.quad -104
	.quad -105
	.quad 106
	.quad 107
	.quad -108
	.quad 109
	.quad -110
	.quad 111
	.quad 112
	.quad -113
	.quad -114
	.quad -115
	.quad -116
	.quad -117
	.quad -118
	.quad 119
	.quad -120
	.quad -121
	.quad 122
	.quad -123
	.quad 124
	.quad 125
	.quad -126
	.quad 127
	.quad -128
	.quad 129
	.quad 130
	.quad -131
	.quad 132
	.quad 133
	.quad -134
	.quad -135
	.quad -136
	.quad -137
	.quad -138
	.quad 139
	.quad 140
	.quad -141
	.quad 142
	.quad -143
	.quad 144
	.quad -145
	.quad 146
	.quad -147
	.quad -148
	.quad -149
	.quad 150
	.quad 151
	.quad 152
	.quad 153
	.quad -154
	.quad 155
	.quad 156
	.quad -157
	.quad 158
	.quad 159
	.quad 160
	.quad 161
	.quad 162
	.quad -163
	.quad -164
	.quad -165
	.quad 166
	.quad 167
	.quad 168
	.quad 169
	.quad -170
	.quad -171
	.quad 172
	.quad 173
	.quad -174
	.quad 175
	.quad 176
	.quad 177
	.quad 178
	.quad 179
	.quad 180
	.quad -181
	.quad 182
	.quad 183
	.quad 184
	.quad 185
	.quad -186
	.quad -187
	.quad -188
	.quad -189
	.quad -190
	.quad -191
	.quad 192
	.quad 193
	.quad -194
	.quad -195
	.quad 196
	.quad 197
	.quad 198
	.quad 199
	.quad 200
	.quad 201
	.quad -202
	.quad -203
	.quad 204
	.quad -205
	.quad -206
	.quad -207
	.quad -208
	.quad 209
	.quad -210
	.quad -211
	.quad -212
	.quad -213
	.quad 214
	.quad 215
	.quad -216
	.quad 217
	.quad -218
	.quad -219
	.quad -220
	.quad 221
	.quad 222
	.quad 223
	.quad -224
	.quad 225
	.quad 226
	.quad 227
	.quad 228
	.quad -229
	.quad 230
	.quad -231
	.quad -232
	.quad 233
	.quad 234
	.quad -235
	.quad 236
	.quad -237
	.quad -238
	.quad -239
	.quad -240
	.quad -241
	.quad -242
	.quad -243
	.quad 244
	.quad -245
	.quad 246
	.quad 247
	.quad 248
	.quad -249
	.quad -250
	.quad -251
	.quad 252
	.quad 253
	.quad -254
	.quad 255
	.quad 256
	.quad -257
	.quad 258
	.quad 259
	.quad -260
	.quad -261
	.quad 262
	.quad 263
	.quad 264
	.quad -265
	.quad 266
	.quad -267
	.quad 268
	.quad 269
	.quad 270
	.quad 271
	.quad 272
	.quad 273
	.quad 274
	.quad -275
	.quad -276
	.quad -277
	.quad -278
	.quad 279
	.quad -280
	.quad 281
	.quad -282
	.quad -283
	.quad 284
	.quad -285
	.quad 286
	.quad -287
	.quad 288
	.quad 289
	.quad -290
	.quad 291
	.quad 292
	.quad -293
	.quad 294
	.quad -295
	.quad -296
	.quad 297
	.quad -298
	.quad 299
	.quad -300
	.quad -301
	.quad -302
	.quad -303
	.quad -304
	.quad -305
	.quad 306
	.quad 307
	.quad 308
	.quad -309
	.quad 310
	.quad 311
	.quad -312
	.quad -313
	.quad -314
	.quad 315
	.quad 316
	.quad 317
	.quad 318
	.quad -319
	.quad -320
	.quad -321
	.quad 322
	.quad 323
	.quad -324
	.quad -325
	.quad 326
	.quad -327
	.quad 328
	.quad -329
	.quad 330
	.quad -331
	.quad 332
	.quad -333
	.quad -334
	.quad 335
	.quad -336
	.quad 337
	.quad -338
	.quad -339
	.quad -340
	.quad 341
	.quad -342
	.quad -343
	.quad -344
	.quad -345
	.quad -346
	.quad 347
	.quad 348
	.quad 349
	.quad 350
	.quad 351
	.quad -352
	.quad 353
	.quad -354
	.quad 355
	.quad 356
	.quad -357
	.quad 358
	.quad 359
	.quad 360
	.quad -361
	.quad 362
	.quad 363
	.quad 364
	.quad -365
	.quad 366
	.quad 367
	.quad 368
	.quad -369
	.quad 370
	.quad -371
	.quad -372
	.quad 373
	.quad 374
	.quad 375
	.quad -376
	.quad 377
	.quad -378
	.quad -379
	.quad -380
	.quad -381
	.quad -382
	.quad 383
	.quad -384
	.quad -385
	.quad -386
	.quad 387
	.quad 388
	.quad -389
	.quad 390
	.quad -391
	.quad -392
	.quad -393
	.quad 394
	.quad -395
	.quad 396
	.quad 397
	.quad -398
	.quad -399
	.quad -400
	.quad 401
	.quad 402
	.quad 403
	.quad -404
	.quad 405
	.quad -406
	.quad 407
	.quad 408
	.quad -409
	.quad 410
	.quad 411
	.quad -412
	.quad 413
	.quad -414
	.quad 415
	.quad 416
	.quad -417
	.quad -418
	.quad 419
	.quad -420
	.quad -421
	.quad 422
	.quad 423
	.quad 424
	.quad 425
	.quad 426
	.quad 427
	.quad -428
	.quad -429
	.quad -430
	.quad -431
	.quad 432
	.quad 433
	.quad 434
	.quad 435
	.quad 436
	.quad -437
	.quad 438
	.quad 439
	.quad -440
	.quad 441
	.quad 442
	.quad -443
	.quad -444
	.quad -445
	.quad 446
	.quad -447
	.quad -448
	.quad -449
	.quad 450
	.quad -451
	.quad 452
	.quad -453
	.quad -454
	.quad 455
	.quad -456
	.quad 457
	.quad 458
	.quad -459
	.quad 460
	.quad 461
	.quad 462
	.quad -463
	.quad 464
	.quad 465
	.quad -466
	.quad 467
	.quad 468
	.quad 469
	.quad -470
	.quad 471
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
