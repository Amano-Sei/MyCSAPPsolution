#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Amano Sei
#
# emmm，怎么说呢，这次的lab在做完homework的情况下完全没有难度啊（
# 不过还是简单说下吧
# 首先，我们的pipeline是默认判断跳转执行的，
# 所以把第一次判断和循环的进行合并
# （不过如果做好前向不跳，后向跳的判断的话肯定是本来比较好）
# 然后，这是我在用y86-64写程序的时候的感想
# 如果常数占据寄存器的话，寄存器的数量瞬间就感觉很紧张（
# 如果不固定占用的话，重复初始化很浪费时钟周期
# 所以iaddq很有必要，毕竟是两条变一条嘛
# （占据的话虽然从平均来说还是差不多，但是总体还是会多两条）
#
# emmm说个题外话，受第三章影响，我潜意识觉得用结束地址来计算是最高效的
# 然而这是建立在有leaq和cmp的基础之上的（
# 在y86-64中，能靠and自己判断是最好的，因为不需要花一条指令拷贝
# 在y86-64中，没有乘和leaq，只能用三次连加算地址...
#
# 起先说没有难度...一跑benchmark就傻眼了...
# 最蠢的时候甚至想不起来load/use hazard...现在的最高分是47.8分(
# 突然产生了一个很有趣的想法，准备试一下
# 发觉这里的jmp都是立即数...想法破灭（
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
    rrmovq %rdx, %rcx
    iaddq $-10, %rcx
    jge BigLoop
    iaddq $8, %rcx
    jge LittleLoop
	iaddq $1, %rcx		# len--
	jl Done			# if so, goto Loop:
    mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Done		# if so, goto Npos:
	iaddq $1, %rax		# count++
    ret
BigLoop:
    mrmovq (%rdi), %r10	# read val from src...
    mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Nposb1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Nposb1:
	andq %r11, %r11		# val <= 0?
	jle Nposb2		# if so, goto Npos:
	iaddq $1, %rax		# count++
Nposb2:
    mrmovq 16(%rdi), %r10	# read val from src...
    mrmovq 24(%rdi), %r11	# read val from src...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Nposb3		# if so, goto Npos:
	iaddq $1, %rax		# count++
Nposb3:
	andq %r11, %r11		# val <= 1?
	jle Nposb4		# if so, goto Npos:
	iaddq $1, %rax		# count++
Nposb4:
    mrmovq 32(%rdi), %r10	# read val from src...
    mrmovq 40(%rdi), %r11	# read val from src...
	rmmovq %r10, 32(%rsi)	# ...and store it to dst
	rmmovq %r11, 40(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Nposb5		# if so, goto Npos:
	iaddq $1, %rax		# count++
Nposb5:
	andq %r11, %r11		# val <= 1?
	jle Nposb6		# if so, goto Npos:
	iaddq $1, %rax		# count++
Nposb6:
    mrmovq 48(%rdi), %r10	# read val from src...
    mrmovq 56(%rdi), %r11	# read val from src...
	rmmovq %r10, 48(%rsi)	# ...and store it to dst
	rmmovq %r11, 56(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Nposb7		# if so, goto Npos:
	iaddq $1, %rax		# count++
Nposb7:
	andq %r11, %r11		# val <= 1?
	jle Nposb8		# if so, goto Npos:
	iaddq $1, %rax		# count++
Nposb8:
    mrmovq 64(%rdi), %r10	# read val from src...
    mrmovq 72(%rdi), %r11	# read val from src...
	rmmovq %r10, 64(%rsi)	# ...and store it to dst
	rmmovq %r11, 72(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Nposb9		# if so, goto Npos:
	iaddq $1, %rax		# count++
Nposb9:
	andq %r11, %r11		# val <= 1?
	jle Nposb10		# if so, goto Npos:
	iaddq $1, %rax		# count++
Nposb10:
	iaddq $80, %rdi		# src++
	iaddq $80, %rsi		# dst++
    rrmovq %rcx, %rdx
    iaddq $-10, %rcx
    jge BigLoop
    iaddq $8, %rcx
    jge LittleLoop
	iaddq $1, %rcx		# len--
	jl Done			# if so, goto Loop:
    mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Done		# if so, goto Npos:
	iaddq $1, %rax		# count++
    ret
LittleLoop:
    mrmovq (%rdi), %r10	# read val from src...
    mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Nposl1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Nposl1:
	andq %r11, %r11		# val <= 0?
	jle Nposl2		# if so, goto Npos:
	iaddq $1, %rax		# count++
Nposl2:
	iaddq $16, %rdi		# src++
	iaddq $16, %rsi		# dst++
    rrmovq %rcx, %rdx
    iaddq $-2, %rcx
    jge LittleLoop
LastTest:
	iaddq $-1, %rdx		# len--
	jl Done			# if so, goto Loop:
LastLoop:
    mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Done		# if so, goto Npos:
	iaddq $1, %rax		# count++
    ret
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
