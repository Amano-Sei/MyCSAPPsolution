#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Amano Sei
#
# 看了dalao的做法，真的超妙的说...
# 所以这里要尝试在理解了dalao的做法后，自己重新写一遍
# 这是将561版本修改jg优先级比je高的版本
# 因为想让jg直接落入L里面，让我忘记了je的几率是最低的
# 但是事实上，这样只省了一个时钟，而预测失误要2个时钟...
# 10位版本这个问题被放大了我才意识到（
#
# 然后我才意识到，跳转的话就一定可以让RR通过落入进入L了
#
# 感叹，这个很多地方直觉感觉不到是正常的，因为很多地方是反直觉的
# 比如更多的跳转语句在预测错误的几率更低的情况下，平均会有更好的表现
# 现在分数已经达到了58.4了
#
# 可以看到因为平均值的算法不是计算总周期数，而是计算平均周期的平均数
# 所以如果在前面加上jl而不是jge，会使得0~8的结果每个都减少了2个周期
# 虽然对于大的数据量来说会增加周期数，但是平均起来就没有低的影响大
# 现在分数是58.8
# 可能是这个做法的瓶颈了（
#
# 重新调整了分界和顺序，分数上升到了59.0...说不定还可以在高一点
#
# 意识到最后一种情况没有必要直接跳转走，这样可以节省一个周期
#
# 因为就差一点点了，所以重新思考了cmov的可能性，再次否决
# 因为cmov需要3个周期，jle的话平均需要2.5个周期
# 但是会有最终部分出现一个bubble和还是要看最终部分的负数的个数...
# 等下会尝试下cmov版本
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
    iaddq $-9, %rdx
    jl LastTest
Loop:
    mrmovq (%rdi), %r8
    mrmovq 8(%rdi), %r9
    rmmovq %r8, (%rsi)
    rmmovq %r9, 8(%rsi)
    andq %r8, %r8
    jle Nposl1
    iaddq $1, %rax
Nposl1:
    andq %r9, %r9
    jle Nposl2
    iaddq $1, %rax
Nposl2:
    mrmovq 16(%rdi), %r8
    mrmovq 24(%rdi), %r9
    rmmovq %r8, 16(%rsi)
    rmmovq %r9, 24(%rsi)
    andq %r8, %r8
    jle Nposl3
    iaddq $1, %rax
Nposl3:
    andq %r9, %r9
    jle Nposl4
    iaddq $1, %rax
Nposl4:
    mrmovq 32(%rdi), %r8
    mrmovq 40(%rdi), %r9
    rmmovq %r8, 32(%rsi)
    rmmovq %r9, 40(%rsi)
    andq %r8, %r8
    jle Nposl5
    iaddq $1, %rax
Nposl5:
    andq %r9, %r9
    jle Nposl6
    iaddq $1, %rax
Nposl6:
    mrmovq 48(%rdi), %r8
    mrmovq 56(%rdi), %r9
    mrmovq 64(%rdi), %r10
    rmmovq %r8, 48(%rsi)
    rmmovq %r9, 56(%rsi)
    rmmovq %r10, 64(%rsi)
    andq %r8, %r8
    jle Nposl7
    iaddq $1, %rax
Nposl7:
    andq %r9, %r9
    jle Nposl8
    iaddq $1, %rax
Nposl8:
    andq %r10, %r10
    jle Nposl9
    iaddq $1, %rax
Nposl9:
    iaddq $0x48, %rsi
    iaddq $0x48, %rdi
    iaddq $-9, %rdx
    jge Loop
LastTest:
    iaddq $8, %rdx
    jg RR
    je L1
    ret
RR:
    iaddq $-2, %rdx
    jg RR3
    jl L2
    mrmovq 16(%rdi), %r8
    jmp Nposf4
RR3:
    iaddq $-3, %rdx
    jl RL
    jg RR2
    mrmovq 40(%rdi), %r8
    jmp Nposf7
RL:
    iaddq $1, %rdx
    jl L4
    mrmovq 32(%rdi), %r8
    jmp Nposf6
RR2:
    iaddq $-2, %rdx
    jl L7
L8:
    mrmovq 56(%rdi), %r8
    rmmovq %r8, 56(%rsi)
    andq %r8, %r8
L7:
    mrmovq 48(%rdi), %r8
    jle Nposf8
    iaddq $1, %rax
Nposf8:
    rmmovq %r8, 48(%rsi)
    andq %r8, %r8
L6:
    mrmovq 40(%rdi), %r8
    jle Nposf7
    iaddq $1, %rax
Nposf7:
    rmmovq %r8, 40(%rsi)
    andq %r8, %r8
L5:
    mrmovq 32(%rdi), %r8
    jle Nposf6
    iaddq $1, %rax
Nposf6:
    andq %r8, %r8
    rmmovq %r8, 32(%rsi)
L4:
    mrmovq 24(%rdi), %r8
    jle Nposf5
    iaddq $1, %rax
Nposf5:
    andq %r8, %r8
    rmmovq %r8, 24(%rsi)
L3:
    mrmovq 16(%rdi), %r8
    jle Nposf4
    iaddq $1, %rax
Nposf4:
    andq %r8, %r8
    rmmovq %r8, 16(%rsi)
L2:
    mrmovq 8(%rdi), %r8
    jle Nposf3
    iaddq $1, %rax
Nposf3:
    andq %r8, %r8
    rmmovq %r8, 8(%rsi)
L1:
    mrmovq (%rdi), %r8
    jle Nposf2
    iaddq $1, %rax
Nposf2:
    andq %r8, %r8
    rmmovq %r8, (%rsi)
    jle Done
    iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
