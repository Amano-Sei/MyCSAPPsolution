                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f61806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Amano Sei
                            | #
                            | # emmm，怎么说呢，这次的lab在做完homework的情况下完全没有难度啊（
                            | # 不过还是简单说下吧
                            | # 首先，我们的pipeline是默认判断跳转执行的，
                            | # 所以把第一次判断和循环的进行合并
                            | # （不过如果做好前向不跳，后向跳的判断的话肯定是本来比较好）
                            | # 然后，这是我在用y86-64写程序的时候的感想
                            | # 如果常数占据寄存器的话，寄存器的数量瞬间就感觉很紧张（
                            | # 如果不固定占用的话，重复初始化很浪费时钟周期
                            | # 所以iaddq很有必要，毕竟是两条变一条嘛
                            | # （占据的话虽然从平均来说还是差不多，但是总体还是会多两条）
                            | #
                            | # emmm说个题外话，受第三章影响，我潜意识觉得用结束地址来计算是最高效的
                            | # 然而这是建立在有leaq和cmp的基础之上的（
                            | # 在y86-64中，能靠and自己判断是最好的，因为不需要花一条指令拷贝
                            | # 在y86-64中，没有乘和leaq，只能用三次连加算地址...
                            | #
                            | # 起先说没有难度...一跑benchmark就傻眼了...
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 2021                 |     rrmovq %rdx, %rcx
0x036: c0f1f2ffffffffffffff |     iaddq $-14, %rcx
0x040: 758c01000000000000   |     jge BigLoop
0x049: c0f10a00000000000000 |     iaddq $10, %rcx
0x053: 75b600000000000000   |     jge MainLoop
0x05c:                      | LastTest:
0x05c: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x066: 757000000000000000   | 	jge LastLoop			# if so, goto Loop:
0x06f: 90                   |     ret
0x070:                      | LastLoop:
0x070: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x07a: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x084: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x08e: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x098: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x09a: 715c00000000000000   | 	jle LastTest		# if so, goto Npos:
0x0a3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0ad: 705c00000000000000   |     jmp LastTest
0x0b6:                      | MainLoop:
0x0b6: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x0c0: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0ca: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0cc: 71df00000000000000   | 	jle Nposm1		# if so, goto Npos:
0x0d5: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0df:                      | Nposm1:
0x0df: 50a70800000000000000 |     mrmovq 8(%rdi), %r10	# read val from src...
0x0e9: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x0f3: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0f5: 710801000000000000   | 	jle Nposm2		# if so, goto Npos:
0x0fe: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x108:                      | Nposm2:
0x108: 50a71000000000000000 |     mrmovq 16(%rdi), %r10	# read val from src...
0x112: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x11c: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x11e: 713101000000000000   | 	jle Nposm3		# if so, goto Npos:
0x127: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x131:                      | Nposm3:
0x131: 50a71800000000000000 |     mrmovq 24(%rdi), %r10	# read val from src...
0x13b: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x145: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x147: 715a01000000000000   | 	jle Nposm4		# if so, goto Npos:
0x150: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x15a:                      | Nposm4:
0x15a: c0f72000000000000000 | 	iaddq $32, %rdi		# src++
0x164: c0f62000000000000000 | 	iaddq $32, %rsi		# dst++
0x16e: 2012                 |     rrmovq %rcx, %rdx
0x170: c0f1fcffffffffffffff |     iaddq $-4, %rcx
0x17a: 75b600000000000000   |     jge MainLoop
0x183: 705c00000000000000   |     jmp LastTest
0x18c:                      | BigLoop:
0x18c: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x196: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x1a0: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1a2: 71b501000000000000   | 	jle Nposb1		# if so, goto Npos:
0x1ab: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1b5:                      | Nposb1:
0x1b5: 50a70800000000000000 |     mrmovq 8(%rdi), %r10	# read val from src...
0x1bf: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x1c9: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1cb: 71de01000000000000   | 	jle Nposb2		# if so, goto Npos:
0x1d4: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1de:                      | Nposb2:
0x1de: 50a71000000000000000 |     mrmovq 16(%rdi), %r10	# read val from src...
0x1e8: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x1f2: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1f4: 710702000000000000   | 	jle Nposb3		# if so, goto Npos:
0x1fd: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x207:                      | Nposb3:
0x207: 50a71800000000000000 |     mrmovq 24(%rdi), %r10	# read val from src...
0x211: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x21b: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x21d: 713002000000000000   | 	jle Nposb4		# if so, goto Npos:
0x226: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x230:                      | Nposb4:
0x230: 50a72000000000000000 |     mrmovq 32(%rdi), %r10	# read val from src...
0x23a: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x244: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x246: 715902000000000000   | 	jle Nposb5		# if so, goto Npos:
0x24f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x259:                      | Nposb5:
0x259: 50a72800000000000000 |     mrmovq 40(%rdi), %r10	# read val from src...
0x263: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)	# ...and store it to dst
0x26d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x26f: 718202000000000000   | 	jle Nposb6		# if so, goto Npos:
0x278: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x282:                      | Nposb6:
0x282: 50a73000000000000000 |     mrmovq 48(%rdi), %r10	# read val from src...
0x28c: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x296: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x298: 71ab02000000000000   | 	jle Nposb7		# if so, goto Npos:
0x2a1: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2ab:                      | Nposb7:
0x2ab: 50a73800000000000000 |     mrmovq 56(%rdi), %r10	# read val from src...
0x2b5: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)	# ...and store it to dst
0x2bf: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x2c1: 71d402000000000000   | 	jle Nposb8		# if so, goto Npos:
0x2ca: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2d4:                      | Nposb8:
0x2d4: 50a74000000000000000 |     mrmovq 64(%rdi), %r10	# read val from src...
0x2de: 40a64000000000000000 | 	rmmovq %r10, 64(%rsi)	# ...and store it to dst
0x2e8: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x2ea: 71fd02000000000000   | 	jle Nposb9		# if so, goto Npos:
0x2f3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2fd:                      | Nposb9:
0x2fd: 50a74800000000000000 |     mrmovq 72(%rdi), %r10	# read val from src...
0x307: 40a64800000000000000 | 	rmmovq %r10, 72(%rsi)	# ...and store it to dst
0x311: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x313: 712603000000000000   | 	jle Nposb10		# if so, goto Npos:
0x31c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x326:                      | Nposb10:
0x326: 50a75000000000000000 |     mrmovq 80(%rdi), %r10	# read val from src...
0x330: 40a65000000000000000 | 	rmmovq %r10, 80(%rsi)	# ...and store it to dst
0x33a: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x33c: 714f03000000000000   | 	jle Nposb11		# if so, goto Npos:
0x345: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x34f:                      | Nposb11:
0x34f: 50a75800000000000000 |     mrmovq 88(%rdi), %r10	# read val from src...
0x359: 40a65800000000000000 | 	rmmovq %r10, 88(%rsi)	# ...and store it to dst
0x363: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x365: 717803000000000000   | 	jle Nposb12		# if so, goto Npos:
0x36e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x378:                      | Nposb12:
0x378: 50a76000000000000000 |     mrmovq 96(%rdi), %r10	# read val from src...
0x382: 40a66000000000000000 | 	rmmovq %r10, 96(%rsi)	# ...and store it to dst
0x38c: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x38e: 71a103000000000000   | 	jle Nposb13		# if so, goto Npos:
0x397: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x3a1:                      | Nposb13:
0x3a1: 50a76800000000000000 |     mrmovq 104(%rdi), %r10	# read val from src...
0x3ab: 40a66800000000000000 | 	rmmovq %r10, 104(%rsi)	# ...and store it to dst
0x3b5: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x3b7: 71ca03000000000000   | 	jle Nposb14		# if so, goto Npos:
0x3c0: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x3ca:                      | Nposb14:
0x3ca: c0f77000000000000000 | 	iaddq $112, %rdi		# src++
0x3d4: c0f67000000000000000 | 	iaddq $112, %rsi		# dst++
0x3de: 2012                 |     rrmovq %rcx, %rdx
0x3e0: c0f1f2ffffffffffffff |     iaddq $-14, %rcx
0x3ea: 758c01000000000000   |     jge BigLoop
0x3f3: c0f10a00000000000000 |     iaddq $10, %rcx
0x3fd: 75b600000000000000   |     jge MainLoop
0x406: 705c00000000000000   |     jmp LastTest
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x40f:                      | Done:
0x40f: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x410:                      | End:
                            | #/* $end ncopy-ys */
0x410:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x410:                      | 	.align 8
0x410:                      | src:
0x410: ffffffffffffffff     | 	.quad -1
0x418: feffffffffffffff     | 	.quad -2
0x420: 0300000000000000     | 	.quad 3
0x428: 0400000000000000     | 	.quad 4
0x430: 0500000000000000     | 	.quad 5
0x438: 0600000000000000     | 	.quad 6
0x440: f9ffffffffffffff     | 	.quad -7
0x448: f8ffffffffffffff     | 	.quad -8
0x450: f7ffffffffffffff     | 	.quad -9
0x458: 0a00000000000000     | 	.quad 10
0x460: f5ffffffffffffff     | 	.quad -11
0x468: f4ffffffffffffff     | 	.quad -12
0x470: f3ffffffffffffff     | 	.quad -13
0x478: 0e00000000000000     | 	.quad 14
0x480: 0f00000000000000     | 	.quad 15
0x488: 1000000000000000     | 	.quad 16
0x490: 1100000000000000     | 	.quad 17
0x498: 1200000000000000     | 	.quad 18
0x4a0: 1300000000000000     | 	.quad 19
0x4a8: ecffffffffffffff     | 	.quad -20
0x4b0: ebffffffffffffff     | 	.quad -21
0x4b8: 1600000000000000     | 	.quad 22
0x4c0: 1700000000000000     | 	.quad 23
0x4c8: e8ffffffffffffff     | 	.quad -24
0x4d0: 1900000000000000     | 	.quad 25
0x4d8: e6ffffffffffffff     | 	.quad -26
0x4e0: 1b00000000000000     | 	.quad 27
0x4e8: 1c00000000000000     | 	.quad 28
0x4f0: 1d00000000000000     | 	.quad 29
0x4f8: e2ffffffffffffff     | 	.quad -30
0x500: e1ffffffffffffff     | 	.quad -31
0x508: e0ffffffffffffff     | 	.quad -32
0x510: dfffffffffffffff     | 	.quad -33
0x518: 2200000000000000     | 	.quad 34
0x520: 2300000000000000     | 	.quad 35
0x528: 2400000000000000     | 	.quad 36
0x530: 2500000000000000     | 	.quad 37
0x538: 2600000000000000     | 	.quad 38
0x540: d9ffffffffffffff     | 	.quad -39
0x548: d8ffffffffffffff     | 	.quad -40
0x550: d7ffffffffffffff     | 	.quad -41
0x558: 2a00000000000000     | 	.quad 42
0x560: 2b00000000000000     | 	.quad 43
0x568: 2c00000000000000     | 	.quad 44
0x570: d3ffffffffffffff     | 	.quad -45
0x578: d2ffffffffffffff     | 	.quad -46
0x580: 2f00000000000000     | 	.quad 47
0x588: 3000000000000000     | 	.quad 48
0x590: cfffffffffffffff     | 	.quad -49
0x598: 3200000000000000     | 	.quad 50
0x5a0: 3300000000000000     | 	.quad 51
0x5a8: 3400000000000000     | 	.quad 52
0x5b0: 3500000000000000     | 	.quad 53
0x5b8: caffffffffffffff     | 	.quad -54
0x5c0: c9ffffffffffffff     | 	.quad -55
0x5c8: c8ffffffffffffff     | 	.quad -56
0x5d0: c7ffffffffffffff     | 	.quad -57
0x5d8: c6ffffffffffffff     | 	.quad -58
0x5e0: c5ffffffffffffff     | 	.quad -59
0x5e8: c4ffffffffffffff     | 	.quad -60
0x5f0: c3ffffffffffffff     | 	.quad -61
0x5f8: c2ffffffffffffff     | 	.quad -62
0x600: c1ffffffffffffff     | 	.quad -63
0x608: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x610:                      | 	.align 16
0x610:                      | Predest:
0x610: fadebc0000000000     | 	.quad 0xbcdefa
0x618:                      | dest:
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810:                      | Postdest:
0x810: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x818:                      | .align 8
                            | # Run time stack
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
0x858: 0000000000000000     | 	.quad 0
0x860: 0000000000000000     | 	.quad 0
0x868: 0000000000000000     | 	.quad 0
0x870: 0000000000000000     | 	.quad 0
0x878: 0000000000000000     | 	.quad 0
0x880: 0000000000000000     | 	.quad 0
0x888: 0000000000000000     | 	.quad 0
0x890: 0000000000000000     | 	.quad 0
                            | 
0x898:                      | Stack:
