                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f44808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6c805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7c003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Amano Sei
                            | #
                            | # 看了dalao的做法，真的超妙的说...
                            | # 所以这里要尝试在理解了dalao的做法后，自己重新写一遍
                            | # 这是将561版本修改jg优先级比je高的版本
                            | # 因为想让jg直接落入L里面，让我忘记了je的几率是最低的
                            | # 但是事实上，这样只省了一个时钟，而预测失误要2个时钟...
                            | # 10位版本这个问题被放大了我才意识到（
                            | #
                            | # 然后我才意识到，跳转的话就一定可以让RR通过落入进入L了
                            | #
                            | # 感叹，这个很多地方直觉感觉不到是正常的，因为很多地方是反直觉的
                            | # 比如更多的跳转语句在预测错误的几率更低的情况下，平均会有更好的表现
                            | # 现在分数已经达到了58.4了
                            | #
                            | # 可以看到因为平均值的算法不是计算总周期数，而是计算平均周期的平均数
                            | # 所以如果在前面加上jl而不是jge，会使得0~8的结果每个都减少了2个周期
                            | # 虽然对于大的数据量来说会增加周期数，但是平均起来就没有低的影响大
                            | # 现在分数是58.8
                            | # 可能是这个做法的瓶颈了（
                            | #
                            | # 重新调整了分界和顺序，分数上升到了59.0...说不定还可以在高一点
                            | #
                            | # 意识到最后一种情况没有必要直接跳转走，这样可以节省一个周期
                            | #
                            | # 因为就差一点点了，所以重新思考了cmov的可能性，再次否决
                            | # 因为cmov需要3个周期，jle的话平均需要2.5个周期
                            | # 但是会有最终部分出现一个bubble和还是要看最终部分的负数的个数...
                            | # 等下会尝试下cmov版本
                            | #
                            | # 一言以蔽之，新优化方法应该是拿高余数的一个周期增加换低余数的一个周期减少
                            | # 结果很显著，冲到了59.8，就差一点了！
                            | #
                            | # 现在的我，还能想到的只剩cmov和动刀hcl了
                            | # 但是现在除了剩8个以外的所有use/load hazard都被避免掉了...
                            | # 额外的ret的气泡唯一可能出现的地方是一个jle，这个是没有办法的事情
                            | # 再试一下dalao的树版本，还不行就写cmov
                            | #
                            | # dalao树失败，cmov失败，尝试hcl
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2f7ffffffffffffff |     iaddq $-9, %rdx
0x03e: 72df01000000000000   |     jl LastTest
0x047:                      | Loop:
0x047: 50870000000000000000 |     mrmovq (%rdi), %r8
0x051: 50970800000000000000 |     mrmovq 8(%rdi), %r9
0x05b: 40860000000000000000 |     rmmovq %r8, (%rsi)
0x065: 40960800000000000000 |     rmmovq %r9, 8(%rsi)
0x06f: 6288                 |     andq %r8, %r8
0x071: 718400000000000000   |     jle Nposl1
0x07a: c0f00100000000000000 |     iaddq $1, %rax
0x084:                      | Nposl1:
0x084: 6299                 |     andq %r9, %r9
0x086: 719900000000000000   |     jle Nposl2
0x08f: c0f00100000000000000 |     iaddq $1, %rax
0x099:                      | Nposl2:
0x099: 50871000000000000000 |     mrmovq 16(%rdi), %r8
0x0a3: 50971800000000000000 |     mrmovq 24(%rdi), %r9
0x0ad: 40861000000000000000 |     rmmovq %r8, 16(%rsi)
0x0b7: 40961800000000000000 |     rmmovq %r9, 24(%rsi)
0x0c1: 6288                 |     andq %r8, %r8
0x0c3: 71d600000000000000   |     jle Nposl3
0x0cc: c0f00100000000000000 |     iaddq $1, %rax
0x0d6:                      | Nposl3:
0x0d6: 6299                 |     andq %r9, %r9
0x0d8: 71eb00000000000000   |     jle Nposl4
0x0e1: c0f00100000000000000 |     iaddq $1, %rax
0x0eb:                      | Nposl4:
0x0eb: 50872000000000000000 |     mrmovq 32(%rdi), %r8
0x0f5: 50972800000000000000 |     mrmovq 40(%rdi), %r9
0x0ff: 40862000000000000000 |     rmmovq %r8, 32(%rsi)
0x109: 40962800000000000000 |     rmmovq %r9, 40(%rsi)
0x113: 6288                 |     andq %r8, %r8
0x115: 712801000000000000   |     jle Nposl5
0x11e: c0f00100000000000000 |     iaddq $1, %rax
0x128:                      | Nposl5:
0x128: 6299                 |     andq %r9, %r9
0x12a: 713d01000000000000   |     jle Nposl6
0x133: c0f00100000000000000 |     iaddq $1, %rax
0x13d:                      | Nposl6:
0x13d: 50873000000000000000 |     mrmovq 48(%rdi), %r8
0x147: 50973800000000000000 |     mrmovq 56(%rdi), %r9
0x151: 50a74000000000000000 |     mrmovq 64(%rdi), %r10
0x15b: 40863000000000000000 |     rmmovq %r8, 48(%rsi)
0x165: 40963800000000000000 |     rmmovq %r9, 56(%rsi)
0x16f: 40a64000000000000000 |     rmmovq %r10, 64(%rsi)
0x179: 6288                 |     andq %r8, %r8
0x17b: 718e01000000000000   |     jle Nposl7
0x184: c0f00100000000000000 |     iaddq $1, %rax
0x18e:                      | Nposl7:
0x18e: 6299                 |     andq %r9, %r9
0x190: 71a301000000000000   |     jle Nposl8
0x199: c0f00100000000000000 |     iaddq $1, %rax
0x1a3:                      | Nposl8:
0x1a3: 62aa                 |     andq %r10, %r10
0x1a5: 71b801000000000000   |     jle Nposl9
0x1ae: c0f00100000000000000 |     iaddq $1, %rax
0x1b8:                      | Nposl9:
0x1b8: c0f64800000000000000 |     iaddq $0x48, %rsi
0x1c2: c0f74800000000000000 |     iaddq $0x48, %rdi
0x1cc: c0f2f7ffffffffffffff |     iaddq $-9, %rdx
0x1d6: 754700000000000000   |     jge Loop
0x1df:                      | LastTest:
0x1df: c0f20800000000000000 |     iaddq $8, %rdx
0x1e9: 76fc01000000000000   |     jg RR
0x1f2: 739403000000000000   |     je L1
0x1fb: 90                   |     ret
0x1fc:                      | RR:
0x1fc: c0f2feffffffffffffff |     iaddq $-2, %rdx
0x206: 762102000000000000   |     jg RR3
0x20f: 726b03000000000000   |     jl L2
0x218: 734203000000000000   |     je L3
0x221:                      | RR3:
0x221: c0f2fdffffffffffffff |     iaddq $-3, %rdx
0x22b: 724602000000000000   |     jl RL
0x234: 766202000000000000   |     jg RR2
0x23d: 70c702000000000000   |     jmp L6
0x246:                      | RL:
0x246: c0f20100000000000000 |     iaddq $1, %rdx
0x250: 721903000000000000   |     jl L4
0x259: 73f002000000000000   |     je L5
0x262:                      | RR2:
0x262: c0f2feffffffffffffff |     iaddq $-2, %rdx
0x26c: 729e02000000000000   |     jl L7
0x275:                      | L8:
0x275: 50873800000000000000 |     mrmovq 56(%rdi), %r8
0x27f: 40863800000000000000 |     rmmovq %r8, 56(%rsi)
0x289: 6288                 |     andq %r8, %r8
0x28b: 719e02000000000000   |     jle L7
0x294: c0f00100000000000000 |     iaddq $1, %rax
0x29e:                      | L7:
0x29e: 50873000000000000000 |     mrmovq 48(%rdi), %r8
0x2a8: 40863000000000000000 |     rmmovq %r8, 48(%rsi)
0x2b2: 6288                 |     andq %r8, %r8
0x2b4: 71c702000000000000   |     jle L6
0x2bd: c0f00100000000000000 |     iaddq $1, %rax
0x2c7:                      | L6:
0x2c7: 50872800000000000000 |     mrmovq 40(%rdi), %r8
0x2d1: 40862800000000000000 |     rmmovq %r8, 40(%rsi)
0x2db: 6288                 |     andq %r8, %r8
0x2dd: 71f002000000000000   |     jle L5
0x2e6: c0f00100000000000000 |     iaddq $1, %rax
0x2f0:                      | L5:
0x2f0: 50872000000000000000 |     mrmovq 32(%rdi), %r8
0x2fa: 40862000000000000000 |     rmmovq %r8, 32(%rsi)
0x304: 6288                 |     andq %r8, %r8
0x306: 711903000000000000   |     jle L4
0x30f: c0f00100000000000000 |     iaddq $1, %rax
0x319:                      | L4:
0x319: 50871800000000000000 |     mrmovq 24(%rdi), %r8
0x323: 40861800000000000000 |     rmmovq %r8, 24(%rsi)
0x32d: 6288                 |     andq %r8, %r8
0x32f: 714203000000000000   |     jle L3
0x338: c0f00100000000000000 |     iaddq $1, %rax
0x342:                      | L3:
0x342: 50871000000000000000 |     mrmovq 16(%rdi), %r8
0x34c: 40861000000000000000 |     rmmovq %r8, 16(%rsi)
0x356: 6288                 |     andq %r8, %r8
0x358: 716b03000000000000   |     jle L2
0x361: c0f00100000000000000 |     iaddq $1, %rax
0x36b:                      | L2:
0x36b: 50870800000000000000 |     mrmovq 8(%rdi), %r8
0x375: 40860800000000000000 |     rmmovq %r8, 8(%rsi)
0x37f: 6288                 |     andq %r8, %r8
0x381: 719403000000000000   |     jle L1
0x38a: c0f00100000000000000 |     iaddq $1, %rax
0x394:                      | L1:
0x394: 50870000000000000000 |     mrmovq (%rdi), %r8
0x39e: 40860000000000000000 |     rmmovq %r8, (%rsi)
0x3a8: 6288                 |     andq %r8, %r8
0x3aa: 71bd03000000000000   |     jle Done
0x3b3: c0f00100000000000000 |     iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3bd:                      | Done:
0x3bd: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3be:                      | End:
                            | #/* $end ncopy-ys */
0x3be:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3c0:                      | 	.align 8
0x3c0:                      | src:
0x3c0: ffffffffffffffff     | 	.quad -1
0x3c8: feffffffffffffff     | 	.quad -2
0x3d0: fdffffffffffffff     | 	.quad -3
0x3d8: 0400000000000000     | 	.quad 4
0x3e0: fbffffffffffffff     | 	.quad -5
0x3e8: faffffffffffffff     | 	.quad -6
0x3f0: 0700000000000000     | 	.quad 7
0x3f8: f8ffffffffffffff     | 	.quad -8
0x400: 0900000000000000     | 	.quad 9
0x408: 0a00000000000000     | 	.quad 10
0x410: f5ffffffffffffff     | 	.quad -11
0x418: 0c00000000000000     | 	.quad 12
0x420: f3ffffffffffffff     | 	.quad -13
0x428: 0e00000000000000     | 	.quad 14
0x430: 0f00000000000000     | 	.quad 15
0x438: 1000000000000000     | 	.quad 16
0x440: efffffffffffffff     | 	.quad -17
0x448: eeffffffffffffff     | 	.quad -18
0x450: 1300000000000000     | 	.quad 19
0x458: ecffffffffffffff     | 	.quad -20
0x460: 1500000000000000     | 	.quad 21
0x468: eaffffffffffffff     | 	.quad -22
0x470: 1700000000000000     | 	.quad 23
0x478: e8ffffffffffffff     | 	.quad -24
0x480: 1900000000000000     | 	.quad 25
0x488: e6ffffffffffffff     | 	.quad -26
0x490: 1b00000000000000     | 	.quad 27
0x498: 1c00000000000000     | 	.quad 28
0x4a0: e3ffffffffffffff     | 	.quad -29
0x4a8: e2ffffffffffffff     | 	.quad -30
0x4b0: 1f00000000000000     | 	.quad 31
0x4b8: 2000000000000000     | 	.quad 32
0x4c0: 2100000000000000     | 	.quad 33
0x4c8: deffffffffffffff     | 	.quad -34
0x4d0: ddffffffffffffff     | 	.quad -35
0x4d8: dcffffffffffffff     | 	.quad -36
0x4e0: 2500000000000000     | 	.quad 37
0x4e8: 2600000000000000     | 	.quad 38
0x4f0: d9ffffffffffffff     | 	.quad -39
0x4f8: d8ffffffffffffff     | 	.quad -40
0x500: d7ffffffffffffff     | 	.quad -41
0x508: 2a00000000000000     | 	.quad 42
0x510: d5ffffffffffffff     | 	.quad -43
0x518: d4ffffffffffffff     | 	.quad -44
0x520: 2d00000000000000     | 	.quad 45
0x528: d2ffffffffffffff     | 	.quad -46
0x530: 2f00000000000000     | 	.quad 47
0x538: 3000000000000000     | 	.quad 48
0x540: 3100000000000000     | 	.quad 49
0x548: ceffffffffffffff     | 	.quad -50
0x550: 3300000000000000     | 	.quad 51
0x558: 3400000000000000     | 	.quad 52
0x560: cbffffffffffffff     | 	.quad -53
0x568: 3600000000000000     | 	.quad 54
0x570: 3700000000000000     | 	.quad 55
0x578: c8ffffffffffffff     | 	.quad -56
0x580: 3900000000000000     | 	.quad 57
0x588: c6ffffffffffffff     | 	.quad -58
0x590: 3b00000000000000     | 	.quad 59
0x598: 3c00000000000000     | 	.quad 60
0x5a0: c3ffffffffffffff     | 	.quad -61
0x5a8: c2ffffffffffffff     | 	.quad -62
0x5b0: c1ffffffffffffff     | 	.quad -63
0x5b8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5c0:                      | 	.align 16
0x5c0:                      | Predest:
0x5c0: fadebc0000000000     | 	.quad 0xbcdefa
0x5c8:                      | dest:
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0:                      | Postdest:
0x7c0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x7c8:                      | .align 8
                            | # Run time stack
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
0x7e8: 0000000000000000     | 	.quad 0
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
0x800: 0000000000000000     | 	.quad 0
0x808: 0000000000000000     | 	.quad 0
0x810: 0000000000000000     | 	.quad 0
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
                            | 
0x848:                      | Stack:
