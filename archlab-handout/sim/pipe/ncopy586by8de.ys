#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Amano Sei
#
# 看了dalao的做法，真的超妙的说...
# 所以这里要尝试在理解了dalao的做法后，自己重新写一遍
# 这是将561版本修改jg优先级比je高的版本
# 因为想让jg直接落入L里面，让我忘记了je的几率是最低的
# 但是事实上，这样只省了一个时钟，而预测失误要2个时钟...
# 10位版本这个问题被放大了我才意识到（
#
# 然后我才意识到，跳转的话就一定可以让RR通过落入进入L了
#
# 感叹，这个很多地方直觉感觉不到是正常的，因为很多地方是反直觉的
# 比如更多的跳转语句在预测错误的几率更低的情况下，平均会有更好的表现
# 现在分数已经达到了58.4了
#
# 可以看到因为平均值的算法不是计算总周期数，而是计算平均周期的平均数
# 所以如果在前面加上jl而不是jge，会使得0~8的结果每个都减少了2个周期
# 虽然对于大的数据量来说会增加周期数，但是平均起来就没有低的影响大
# 现在分数是58.8
# 可能是这个做法的瓶颈了（
#
# 588版本加入我的突发想法的版本，分数达到了59.2
# 接下来才是重头戏，我的突发想法使得7位展开获得了一个重大优化的可能
# 
# 好像这个优化并没有使得7位冲破界限，不过我会在尝试下8位版本的
#
# 在8位版本下同样没有重大突破
# 但是因为7位和8位使用优化时遇到的问题，我有了新的优化方向
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
    iaddq $-8, %rdx
    jl LastTest
Loop:
    mrmovq (%rdi), %r8
    mrmovq 8(%rdi), %r9
    rmmovq %r8, (%rsi)
    rmmovq %r9, 8(%rsi)
    andq %r8, %r8
    jle Nposl1
    iaddq $1, %rax
Nposl1:
    andq %r9, %r9
    jle Nposl2
    iaddq $1, %rax
Nposl2:
    mrmovq 16(%rdi), %r8
    mrmovq 24(%rdi), %r9
    rmmovq %r8, 16(%rsi)
    rmmovq %r9, 24(%rsi)
    andq %r8, %r8
    jle Nposl3
    iaddq $1, %rax
Nposl3:
    andq %r9, %r9
    jle Nposl4
    iaddq $1, %rax
Nposl4:
    mrmovq 32(%rdi), %r8
    mrmovq 40(%rdi), %r9
    rmmovq %r8, 32(%rsi)
    rmmovq %r9, 40(%rsi)
    andq %r8, %r8
    jle Nposl5
    iaddq $1, %rax
Nposl5:
    andq %r9, %r9
    jle Nposl6
    iaddq $1, %rax
Nposl6:
    mrmovq 48(%rdi), %r8
    mrmovq 56(%rdi), %r9
    rmmovq %r8, 48(%rsi)
    rmmovq %r9, 56(%rsi)
    andq %r8, %r8
    jle Nposl7
    iaddq $1, %rax
Nposl7:
    andq %r9, %r9
    jle Nposl8
    iaddq $1, %rax
Nposl8:
    iaddq $0x40, %rsi
    iaddq $0x40, %rdi
    iaddq $-8, %rdx
    jge Loop
LastTest:
    iaddq $5, %rdx
    jl LL
    jg RR
    mrmovq 16(%rdi), %r8
    jmp Nposf4
LL:
    iaddq $2, %rdx
    mrmovq (%rdi), %r8
    je Nposf2
    mrmovq 8(%rdi), %r8
    jg Nposf3
    ret
RR:
    iaddq $-2, %rdx
    jl L4
    je L5
    iaddq $-2, %rdx
    jl L6
L7:
    mrmovq 48(%rdi), %r8
    rmmovq %r8, 48(%rsi)
    andq %r8, %r8
L6:
    mrmovq 40(%rdi), %r8
    jle Nposf7
    iaddq $1, %rax
Nposf7:
    rmmovq %r8, 40(%rsi)
    andq %r8, %r8
L5:
    mrmovq 32(%rdi), %r8
    jle Nposf6
    iaddq $1, %rax
Nposf6:
    andq %r8, %r8
    rmmovq %r8, 32(%rsi)
L4:
    mrmovq 24(%rdi), %r8
    jle Nposf5
    iaddq $1, %rax
Nposf5:
    andq %r8, %r8
    rmmovq %r8, 24(%rsi)
L3:
    mrmovq 16(%rdi), %r8
    jle Nposf4
    iaddq $1, %rax
Nposf4:
    andq %r8, %r8
    rmmovq %r8, 16(%rsi)
L2:
    mrmovq 8(%rdi), %r8
    jle Nposf3
    iaddq $1, %rax
Nposf3:
    andq %r8, %r8
    rmmovq %r8, 8(%rsi)
L1:
    mrmovq (%rdi), %r8
    jle Nposf2
    iaddq $1, %rax
Nposf2:
    andq %r8, %r8
    rmmovq %r8, (%rsi)
    jle Done
    iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
