                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f47001000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6c800000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79800000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Amano Sei
                            | #
                            | # emmm，怎么说呢，这次的lab在做完homework的情况下完全没有难度啊（
                            | # 不过还是简单说下吧
                            | # 首先，我们的pipeline是默认判断跳转执行的，
                            | # 所以把第一次判断和循环的进行合并
                            | # （不过如果做好前向不跳，后向跳的判断的话肯定是本来比较好）
                            | # 然后，这是我在用y86-64写程序的时候的感想
                            | # 如果常数占据寄存器的话，寄存器的数量瞬间就感觉很紧张（
                            | # 如果不固定占用的话，重复初始化很浪费时钟周期
                            | # 所以iaddq很有必要，毕竟是两条变一条嘛
                            | # （占据的话虽然从平均来说还是差不多，但是总体还是会多两条）
                            | #
                            | # emmm说个题外话，受第三章影响，我潜意识觉得用结束地址来计算是最高效的
                            | # 然而这是建立在有leaq和cmp的基础之上的（
                            | # 在y86-64中，能靠and自己判断是最好的，因为不需要花一条指令拷贝
                            | # 在y86-64中，没有乘和leaq，只能用三次连加算地址...
                            | #
                            | # 起先说没有难度...一跑benchmark就傻眼了...
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x036: 764000000000000000   |     jg Loop
0x03f: 90                   |     ret
0x040:                      | Loop:
0x040: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x04a: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x054: 50a7f8ffffffffffffff |     mrmovq -8(%rdi), %r10	# read val from src...
0x05e: 40a6f8ffffffffffffff | 	rmmovq %r10, -8(%rsi)	# ...and store it to dst
0x068: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x06a: 717d00000000000000   | 	jle Npos		# if so, goto Npos:
0x073: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x07d:                      | Npos:
0x07d: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x087:                      | Test:
0x087: 764000000000000000   | 	jg Loop			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x090:                      | Done:
0x090: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x091:                      | End:
                            | #/* $end ncopy-ys */
0x091:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x098:                      | 	.align 8
0x098:                      | src:
0x098: ffffffffffffffff     | 	.quad -1
0x0a0: feffffffffffffff     | 	.quad -2
0x0a8: 0300000000000000     | 	.quad 3
0x0b0: 0400000000000000     | 	.quad 4
0x0b8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x0c0:                      | 	.align 16
0x0c0:                      | Predest:
0x0c0: fadebc0000000000     | 	.quad 0xbcdefa
0x0c8:                      | dest:
0x0c8: abefcd0000000000     | 	.quad 0xcdefab
0x0d0: abefcd0000000000     | 	.quad 0xcdefab
0x0d8: abefcd0000000000     | 	.quad 0xcdefab
0x0e0: abefcd0000000000     | 	.quad 0xcdefab
0x0e8:                      | Postdest:
0x0e8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x0f0:                      | .align 8
                            | # Run time stack
0x0f0: 0000000000000000     | 	.quad 0
0x0f8: 0000000000000000     | 	.quad 0
0x100: 0000000000000000     | 	.quad 0
0x108: 0000000000000000     | 	.quad 0
0x110: 0000000000000000     | 	.quad 0
0x118: 0000000000000000     | 	.quad 0
0x120: 0000000000000000     | 	.quad 0
0x128: 0000000000000000     | 	.quad 0
0x130: 0000000000000000     | 	.quad 0
0x138: 0000000000000000     | 	.quad 0
0x140: 0000000000000000     | 	.quad 0
0x148: 0000000000000000     | 	.quad 0
0x150: 0000000000000000     | 	.quad 0
0x158: 0000000000000000     | 	.quad 0
0x160: 0000000000000000     | 	.quad 0
0x168: 0000000000000000     | 	.quad 0
                            | 
0x170:                      | Stack:
